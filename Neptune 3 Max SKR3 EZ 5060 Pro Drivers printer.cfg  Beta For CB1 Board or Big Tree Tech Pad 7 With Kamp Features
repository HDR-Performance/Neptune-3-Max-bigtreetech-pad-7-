# Adapted Klipper printer.cfg for Elegoo Neptune 3 Max with BIGTREETECH SKR 3 EZ and TMC5160 Pro EZ Drivers

# This config merges your stock Robin Nano config with the base SKR 3 EZ setup.
# Firmware: Compile for STM32H743 / STM32H723 with 128KiB bootloader, USB on PA11/PA12.
# Flash: Rename klipper.bin to firmware.bin, copy to SD card root, power on to update.
# See docs/Config_Reference.md for a description of parameters.

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_3A000F001251333031373138-if00

[include KAMP_Settings.cfg]
[include timelapse.cfg]
[include mainsail.cfg]
[include Line_Purge.cfg]
[include Smart_Park.cfg]
[include Adaptive_Meshing.cfg]
[exclude_object] # Comment out for Sonic Pad

[virtual_sdcard]
#path: ~/gcode_files

[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode:
   SET_LED LED=LED_Light WHITE=0.25 SYNC=0 TRANSMIT=1 ; 25 Percent Led Light
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  M140 S{BED_TEMP}
  M104 S{EXTRUDER_TEMP}
  G28
  M190 S{BED_TEMP}
  M109 S{EXTRUDER_TEMP}
 
   SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=0 ADAPTIVE_ENABLE=1 ; Setup KAMP
   BED_MESH_CALIBRATE ADAPTIVE=1 ; Calibrate bed mesh
   Smart_Park
   LINE_PURGE

[gcode_macro CANCEL_PRINT]
description: Cancels the print, parks the toolhead like PAUSE, and shuts down like END_PRINT
gcode:
    M117 Cancelling print
    # Park the toolhead like PAUSE
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    G91 ; Relative positioning
    {% if "xyz" in printer.toolhead.homed_axes %}
        G1 Z{z_safe} F900 ; Lift Z like PAUSE
        G90 ; Absolute positioning
        G1 X{x_park} Y{y_park} F6000 ; Move to park position like PAUSE
    {% else %}
        {action_respond_info("Printer not homed, skipping park")}
    {% endif %}
    # Shut down like END_PRINT
    M104 S0 ; Turn off extruder heater
    M140 S0 ; Turn off bed heater
    M106 S0 ; Turn off fan and reset override
    SET_GCODE_VARIABLE MACRO=SET_FAN_SPEED VARIABLE=fan_override VALUE="False" ; Disable fan override
    SET_LED LED=LED_Light WHITE=0.0 SYNC=0 TRANSMIT=1 ; Turn off LED
    M84 ; Disable motors
    BED_MESH_CLEAR ; Clear adaptive mesh
    CLEAR_PAUSE ; Clear any pause state
    SDCARD_RESET_FILE ; Reset SD print file (if using SD)
    M117 Print cancelled

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY) %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    RESUME_BASE {get_params}

[gcode_macro END_PRINT]
gcode:
   M104 S0 ; Turn off extruder heater
   M140 S0 ; Turn off bed heater
   M106 S0 ; Turn off fan and reset override
   SET_GCODE_VARIABLE MACRO=SET_FAN_SPEED VARIABLE=fan_override VALUE="False" ; Disable fan override
   G91 ; Relative positioning
   G1 Z10 F300 ; Move Z axis up 10mm to avoid collision
   G90 ; Absolute positioning
   G1 Y200 F3000 ; Move Y axis forward to deliver the print
   SET_LED LED=LED_Light WHITE=0.0 SYNC=0 TRANSMIT=1
   M84 ; Disable motors

[homing_override]
gcode:
  G28 X Y ; Home X and Y axes to endstops
  G90 ; Absolute positioning
  G0 X241 Y193 F6000 ; Move to safe Z homing position at 100 mm/s
  G28 Z ; Home Z axis with probe
  G91 ; Relative positioning
  G0 Z10 F900 ; Z-hop 10 mm after homing (matches safe_z_home z_hop: 10)
  G90 ; Back to absolute positioning
set_position_z: 0 ; Reset Z position to 0 after homing

[gcode_macro MANUAL_BED_TRAMMING]
description: Home and measure for manual leveling adjustments
gcode:
  G28
  SCREWS_TILT_CALCULATE
  G90
  G1 F3000 X213 Y213 Z25

[gcode_macro MANUAL_Z_OFFSET_ADJUST]
description: Manually adjust Z offset by moving to current offset and allowing incremental changes
gcode:
    # Get current Z offset from config (fallback to 0 if undefined)
    {% set current_z_offset = printer.configfile.config.probe.z_offset | float | default(0.0) %}
    {% set center_x = printer.toolhead.axis_maximum.x / 2 | float %} ; Center of X (215 mm)
    {% set center_y = printer.toolhead.axis_maximum.y / 2 | float %} ; Center of Y (215 mm)
    {% set travel_speed = printer.toolhead.max_velocity * 60 | float %} ; Travel speed (15000 mm/min)
    # Display current Z offset
    {action_respond_info("Current Z offset: %.3f mm" % current_z_offset)}
    # Auto-home all axes
    G28
    {action_respond_info("Printer homed.")}
    # Move to center of bed at current Z offset
    G90 ; Absolute positioning
    G0 X{center_x} Y{center_y} Z10 F{travel_speed} ; Start at Z:10 mm for safety
    G0 Z{current_z_offset} F900 ; Move to current Z offset at slower speed (15 mm/s)
    # Instructions for adjustment
    {action_respond_info("Nozzle is at current Z offset (%.3f mm)." % current_z_offset)}
    {action_respond_info("Use G0 Z+0.1 or G0 Z-0.1 to adjust (e.g., 0.1 mm steps).")}
    {action_respond_info("Use G0 Z+0.01 or G0 Z-0.01 for finer adjustments.")}
    {action_respond_info("When satisfied, note the final Z position and run SAVE_Z_OFFSET Z=<value>.")}

[gcode_macro CALIBRATE_SHAPER]
description: Run input shaper calibration for X and Y axes with limited frequency range
gcode:
    G28 ; Home all axes
    TEST_RESONANCES AXIS=X FREQ_START=20 FREQ_END=60 ; X-axis calibration
    TEST_RESONANCES AXIS=Y FREQ_START=20 FREQ_END=60 ; Y-axis calibration
    SAVE_CONFIG ; Save results to printer.cfg

#[led LED_Light]
#white_pin: PB9
#shutdown_speed: 1.0
#cycle_time:0.010

[printer]
kinematics: cartesian
max_velocity: 800
max_accel: 5000
#minimum_cruise_ratio: 0.5
max_z_velocity: 25
max_z_accel: 200
square_corner_velocity: 5
# Use those higher values just to configure Input Shaper
#max_accel: 10000
#max_accel_to_decel: 10000

[stepper_x]
step_pin: PD4
dir_pin: !PD3
enable_pin: !PD6
microsteps: 16 # Set via driver jumpers/SPI
rotation_distance: 40
endstop_pin: PC1  # Adapted from stock PA13
position_endstop: 0
position_min: 0
position_max: 430
homing_speed: 70

[stepper_y]
step_pin: PA15
dir_pin: !PA8
enable_pin: !PD1
microsteps: 16
rotation_distance: 40
endstop_pin: PC3  # Adapted from stock PB8
position_endstop: -6
position_min: -6
position_max: 430
homing_speed: 40

[stepper_z]
step_pin: PE2
dir_pin: PE3
enable_pin: !PE0
rotation_distance: 8.0
microsteps: 16
position_min: -4.0
position_max: 506
endstop_pin: probe:z_virtual_endstop
homing_speed: 10
homing_retract_speed: 15

[extruder]
max_extrude_only_distance: 100.0
max_extrude_cross_section: 10
step_pin: PD15
dir_pin: !PD14
enable_pin: !PC7
microsteps: 16
nozzle_diameter: 0.600
filament_diameter: 1.750
heater_pin: PB3  # Adapted from stock PA6
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA2  # Adapted from stock PC1
min_temp: 0
max_temp: 320
rotation_distance: 6.9
pressure_advance: 0.056
#control: pid
#pid_kp: 30.437
#pid_ki: 2.670
#pid_kd: 86.746  # From your saved config

[verify_heater extruder]
hysteresis: 5
max_error: 120
check_gain_time: 25

[firmware_retraction]
retract_length: 0.5
retract_speed: 35
unretract_extra_length: 0
unretract_speed: 35

[heater_bed]
heater_pin: PD7  # Adapted from stock PA5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA1  # Adapted from stock PC0
pwm_cycle_time: 0.020
max_temp: 110
min_temp: 0
control: pid
pid_kp: 71.562
pid_ki: 0.778
pid_kd: 1645.031

[heater_fan hotend_fan]
pin: PB5  # Adapted from stock PB0
heater: extruder
heater_temp: 50.0

[fan]
pin: PB6  # Adapted from stock PA7

[gcode_macro SET_FAN_SPEED]
description: Sets a manual fan speed with optional override persistence
variable_fan_speed: 0
variable_fan_override: False
gcode:
    {% set SPEED = params.SPEED|default(100)|float %}
    {% set OVERRIDE = params.OVERRIDE|default(0)|int %}
    {% if SPEED >= 0 and SPEED <= 100 %}
        {% set FAN_SPEED = (SPEED / 100.0) * 255|int %}
        M106 S{FAN_SPEED}
        G4 P100
        SET_GCODE_VARIABLE MACRO=SET_FAN_SPEED VARIABLE=fan_speed VALUE={FAN_SPEED}
        SET_GCODE_VARIABLE MACRO=SET_FAN_SPEED VARIABLE=fan_override VALUE={OVERRIDE > 0}
        M117 Fan speed set to {SPEED}% {", override " + ("enabled" if OVERRIDE > 0 else "disabled")}
    {% else %}
        M117 Invalid speed! Use 0-100.
    {% endif %}

[gcode_macro UPDATE_FAN_SPEED]
description: Internal macro to enforce fan speed override during print
gcode:
    {% if printer['gcode_macro SET_FAN_SPEED'].fan_override %}
        M106 S{printer['gcode_macro SET_FAN_SPEED'].fan_speed}
    {% endif %}

[force_move]
enable_force_move: True

[probe]
pin: ^PC0  # SKR Probe pin, adapted from stock ^PA8 (use pull-up if needed)
speed: 15
lift_speed: 40
samples: 3
x_offset: -28.5
y_offset: 22
z_offset: 1.620  # From your saved config

[filament_switch_sensor filament_sensor]
pause_on_runout: true
switch_pin: PC2  # SKR Fil-DET pin, adapted from stock PB4

[bed_mesh]
probe_count: 11,9
algorithm: bicubic
speed: 350
horizontal_move_z: 10
mesh_min: 33, 16
mesh_max: 397, 415
fade_start: 1.0
fade_end: 10.0

[temperature_sensor raspberry_pi]
sensor_type: temperature_host

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
#sensor_temperature1: 25 # Old Config for the Stock Robin Nano Board
#sensor_adc1: 0.210317   # Old Config for the Stock Robin Nano Board

[gcode_macro M420]
description: Load the current mesh
gcode:
  BED_MESH_PROFILE LOAD=default
 
[gcode_macro G29]
description: creates automated homing and bed mesh
gcode:
  G28
  BED_MESH_CALIBRATE
  DATA_SAVE  # Assuming this is a custom save macro; adjust if needed

[screws_tilt_adjust]
screw_thread: CW-M3
speed: 200
screw1: 243.5, 193
screw1_name: center
screw2: 421, 370.5
screw2_name: right back screw
screw3: 421, 193
screw3_name: right middle screw
screw4: 421, 15.5
screw4_name: right front screw
screw5: 66, 15.5
screw5_name: left front screw
screw6: 66, 193
screw6_name: left middle screw
screw7: 66, 370.5
screw7_name: left back screw

[mcu CB1]  # Keep if using CB1/RPi for host
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: CB1:None
spi_bus: spidev1.1
spi_speed: 5000000
axes_map: z,y,-x

[resonance_tester]
accel_chip: adxl345
probe_points:
    215, 215, 20
accel_per_hz: 50
max_smoothing: 0.2

[input_shaper]
#shaper_type_y: ei
#shaper_freq_y: 40.2
#shaper_type_x: ei
#shaper_freq_x: 59.8  # From your saved config

[gcode_macro BED_PID_TUNE]
description: Run PID tuning for the heated bed at a specified temperature. Usage: BED_PID_TUNE TEMP=<value>
gcode:
  {% set TEMP = params.TEMP|default(60)|float %}
  {% if TEMP >= 0 and TEMP <= 110 %}
    M117 Running Bed PID Tuning at {TEMP}°C
    G28 ; Home all axes before tuning
    PID_CALIBRATE HEATER=heater_bed TARGET={TEMP}
    M117 Bed PID Tuning Complete! Check terminal for values.
    SAVE_CONFIG
  {% else %}
    M117 Error: TEMP must be between 0 and 110°C
    {action_respond_info("Invalid temperature! Use TEMP between 0 and 110°C.")}
  {% endif %}

[gcode_macro NOZZLE_PID_TUNE]
description: Run PID tuning for the extruder at a specified temperature and fan speed. Usage: NOZZLE_PID_TUNE TEMP=<value> FAN_SPEED=<0-100>
gcode:
  {% set TEMP = params.TEMP|default(200)|float %}
  {% set FAN_SPEED = params.FAN_SPEED|default(0)|float %}
  {% if TEMP >= 0 and TEMP <= 290 %}
    {% if FAN_SPEED >= 0 and FAN_SPEED <= 100 %}
      M117 Running Nozzle PID Tuning at {TEMP}°C with fan at {FAN_SPEED}%
      G28 ; Home all axes before tuning
      SET_HEATER_FAN_SPEED HEATER_FAN=hotend_fan VALUE=0 ; Disable hotend fan
      SET_FAN_SPEED FAN=fan SPEED={FAN_SPEED} ; Set part cooling fan
      PID_CALIBRATE HEATER=extruder TARGET={TEMP}
      M117 Nozzle PID Tuning Complete! Check terminal for values.
      SET_FAN_SPEED FAN=fan SPEED=0 ; Reset part cooling fan
      SET_HEATER_FAN_SPEED HEATER_FAN=hotend_fan VALUE=255 ; Restore hotend fan
      SAVE_CONFIG
    {% else %}
      M117 Error: FAN_SPEED must be between 0 and 100%
      {action_respond_info("Invalid fan speed! Use FAN_SPEED between 0 and 100%.")}
    {% endif %}
  {% else %}
    M117 Error: TEMP must be between 0 and 290°C
    {action_respond_info("Invalid temperature! Use TEMP between 0 and 290°C.")}
  {% endif %}

[gcode_arcs]
resolution: 0.5

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,
    EXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,
    EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.

########################################
# TMC5160 configuration (SPI mode)
########################################

[tmc5160 stepper_x]
cs_pin: PD5
spi_software_miso_pin: PE15
spi_software_mosi_pin: PE13
spi_software_sclk_pin: PE14
run_current: 1.0
hold_current: 0.5
sense_resistor: 0.075
interpolate: true
stealthchop_threshold: 999999  # Disable; tune if needed

[tmc5160 stepper_y]
cs_pin: PD0
spi_software_miso_pin: PE15
spi_software_mosi_pin: PE13
spi_software_sclk_pin: PE14
run_current: 1.6
hold_current: 0.7
sense_resistor: 0.075
interpolate: true
stealthchop_threshold: 999999

[tmc5160 stepper_z]
cs_pin: PE1
spi_software_miso_pin: PE15
spi_software_mosi_pin: PE13
spi_software_sclk_pin: PE14
run_current: 0.8
hold_current: 0.5
sense_resistor: 0.075
interpolate: true
stealthchop_threshold: 999999

[tmc5160 extruder]
cs_pin: PC6
spi_software_miso_pin: PE15
spi_software_mosi_pin: PE13
spi_software_sclk_pin: PE14
run_current: 0.8
hold_current: 0.4
sense_resistor: 0.075
interpolate: true
stealthchop_threshold: 999999

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*#
#*# [input_shaper]
#*# shaper_type_y = ei
#*# shaper_freq_y = 40.2
#*# shaper_type_x = ei
#*# shaper_freq_x = 50.0
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 32.771
#*# pid_ki = 3.361
#*# pid_kd = 79.880
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.066667, 0.111667, 0.140833
#*# 	0.060833, 0.080000, 0.115000
#*# 	0.040833, 0.082500, 0.099167
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 175.0
#*# max_x = 245.0
#*# min_y = 189.498
#*# max_y = 230.498
